// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: feature_store.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PingReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingReq) Reset() {
	*x = PingReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingReq) ProtoMessage() {}

func (x *PingReq) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingReq.ProtoReflect.Descriptor instead.
func (*PingReq) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{0}
}

type PongResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pong string `protobuf:"bytes,1,opt,name=pong,proto3" json:"pong,omitempty"`
}

func (x *PongResp) Reset() {
	*x = PongResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PongResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PongResp) ProtoMessage() {}

func (x *PongResp) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PongResp.ProtoReflect.Descriptor instead.
func (*PongResp) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{1}
}

func (x *PongResp) GetPong() string {
	if x != nil {
		return x.Pong
	}
	return ""
}

type GetSkuFeaturesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CatalogueName string `protobuf:"bytes,1,opt,name=catalogue_name,json=catalogueName,proto3" json:"catalogue_name,omitempty"`
	SkuId         string `protobuf:"bytes,2,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
	TraceId       string `protobuf:"bytes,3,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (x *GetSkuFeaturesReq) Reset() {
	*x = GetSkuFeaturesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSkuFeaturesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkuFeaturesReq) ProtoMessage() {}

func (x *GetSkuFeaturesReq) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkuFeaturesReq.ProtoReflect.Descriptor instead.
func (*GetSkuFeaturesReq) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{2}
}

func (x *GetSkuFeaturesReq) GetCatalogueName() string {
	if x != nil {
		return x.CatalogueName
	}
	return ""
}

func (x *GetSkuFeaturesReq) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

func (x *GetSkuFeaturesReq) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type GetSkuFeaturesForAllCataloguesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuId   string `protobuf:"bytes,1,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
	TraceId string `protobuf:"bytes,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (x *GetSkuFeaturesForAllCataloguesReq) Reset() {
	*x = GetSkuFeaturesForAllCataloguesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSkuFeaturesForAllCataloguesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkuFeaturesForAllCataloguesReq) ProtoMessage() {}

func (x *GetSkuFeaturesForAllCataloguesReq) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkuFeaturesForAllCataloguesReq.ProtoReflect.Descriptor instead.
func (*GetSkuFeaturesForAllCataloguesReq) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{3}
}

func (x *GetSkuFeaturesForAllCataloguesReq) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

func (x *GetSkuFeaturesForAllCataloguesReq) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type SkuFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuId                                  string  `protobuf:"bytes,1,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
	PType                                  string  `protobuf:"bytes,2,opt,name=p_type,json=pType,proto3" json:"p_type,omitempty"`
	SubCategory                            string  `protobuf:"bytes,3,opt,name=sub_category,json=subCategory,proto3" json:"sub_category,omitempty"`
	Price                                  float32 `protobuf:"fixed32,4,opt,name=price,proto3" json:"price,omitempty"`
	Date                                   string  `protobuf:"bytes,5,opt,name=date,proto3" json:"date,omitempty"`
	MadThatDay                             float32 `protobuf:"fixed32,6,opt,name=mad_that_day,json=madThatDay,proto3" json:"mad_that_day,omitempty"`
	MbdThatDay                             float32 `protobuf:"fixed32,7,opt,name=mbd_that_day,json=mbdThatDay,proto3" json:"mbd_that_day,omitempty"`
	AspLast_3                              float32 `protobuf:"fixed32,8,opt,name=asp_last_3,json=aspLast3,proto3" json:"asp_last_3,omitempty"`
	SkuHmlCut                              float32 `protobuf:"fixed32,9,opt,name=sku_hml_cut,json=skuHmlCut,proto3" json:"sku_hml_cut,omitempty"`
	AllSkuGmv_1RealTime                    float32 `protobuf:"fixed32,10,opt,name=all_sku_gmv_1_real_time,json=allSkuGmv1RealTime,proto3" json:"all_sku_gmv_1_real_time,omitempty"`
	AllSkuGmvPerImp_7                      float32 `protobuf:"fixed32,11,opt,name=all_sku_gmv_per_imp_7,json=allSkuGmvPerImp7,proto3" json:"all_sku_gmv_per_imp_7,omitempty"`
	AllSkuMad_1Hist                        float32 `protobuf:"fixed32,12,opt,name=all_sku_mad_1_hist,json=allSkuMad1Hist,proto3" json:"all_sku_mad_1_hist,omitempty"`
	AllSkuMad_1RealTime                    float32 `protobuf:"fixed32,13,opt,name=all_sku_mad_1_real_time,json=allSkuMad1RealTime,proto3" json:"all_sku_mad_1_real_time,omitempty"`
	AllSkuMargin_1RealTime                 float32 `protobuf:"fixed32,14,opt,name=all_sku_margin_1_real_time,json=allSkuMargin1RealTime,proto3" json:"all_sku_margin_1_real_time,omitempty"`
	AllSkuMbd_1Hist                        float32 `protobuf:"fixed32,15,opt,name=all_sku_mbd_1_hist,json=allSkuMbd1Hist,proto3" json:"all_sku_mbd_1_hist,omitempty"`
	AllSkuOrderConversion_1Hist            float32 `protobuf:"fixed32,16,opt,name=all_sku_order_conversion_1_hist,json=allSkuOrderConversion1Hist,proto3" json:"all_sku_order_conversion_1_hist,omitempty"`
	AllSkuOrderConversion_1RealTime        float32 `protobuf:"fixed32,17,opt,name=all_sku_order_conversion_1_real_time,json=allSkuOrderConversion1RealTime,proto3" json:"all_sku_order_conversion_1_real_time,omitempty"`
	AllSkuGmvPerDau_1RealTime              float32 `protobuf:"fixed32,18,opt,name=all_sku_gmv_per_dau_1_real_time,json=allSkuGmvPerDau1RealTime,proto3" json:"all_sku_gmv_per_dau_1_real_time,omitempty"`
	AllSkuImpression_1RealTime             float32 `protobuf:"fixed32,19,opt,name=all_sku_impression_1_real_time,json=allSkuImpression1RealTime,proto3" json:"all_sku_impression_1_real_time,omitempty"`
	AllSkuMarginPerDau_1RealTime           float32 `protobuf:"fixed32,20,opt,name=all_sku_margin_per_dau_1_real_time,json=allSkuMarginPerDau1RealTime,proto3" json:"all_sku_margin_per_dau_1_real_time,omitempty"`
	MarginRealTime                         float32 `protobuf:"fixed32,21,opt,name=margin_real_time,json=marginRealTime,proto3" json:"margin_real_time,omitempty"`
	AllSkuUniqueTransactingUsers_1RealTime float32 `protobuf:"fixed32,22,opt,name=all_sku_unique_transacting_users_1_real_time,json=allSkuUniqueTransactingUsers1RealTime,proto3" json:"all_sku_unique_transacting_users_1_real_time,omitempty"`
	AllSkuOrderConversion_7                float32 `protobuf:"fixed32,23,opt,name=all_sku_order_conversion_7,json=allSkuOrderConversion7,proto3" json:"all_sku_order_conversion_7,omitempty"`
	UserPenetration_7                      float32 `protobuf:"fixed32,24,opt,name=user_penetration_7,json=userPenetration7,proto3" json:"user_penetration_7,omitempty"`
	TopSkuFlag                             int32   `protobuf:"varint,25,opt,name=top_sku_flag,json=topSkuFlag,proto3" json:"top_sku_flag,omitempty"`
	TopSkuFlagAll                          int32   `protobuf:"varint,26,opt,name=top_sku_flag_all,json=topSkuFlagAll,proto3" json:"top_sku_flag_all,omitempty"`
	AllSkuOrders_1RealTime                 float32 `protobuf:"fixed32,27,opt,name=all_sku_orders_1_real_time,json=allSkuOrders1RealTime,proto3" json:"all_sku_orders_1_real_time,omitempty"`
	LastResetAt                            string  `protobuf:"bytes,28,opt,name=last_reset_at,json=lastResetAt,proto3" json:"last_reset_at,omitempty"`
}

func (x *SkuFeatures) Reset() {
	*x = SkuFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SkuFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SkuFeatures) ProtoMessage() {}

func (x *SkuFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SkuFeatures.ProtoReflect.Descriptor instead.
func (*SkuFeatures) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{4}
}

func (x *SkuFeatures) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

func (x *SkuFeatures) GetPType() string {
	if x != nil {
		return x.PType
	}
	return ""
}

func (x *SkuFeatures) GetSubCategory() string {
	if x != nil {
		return x.SubCategory
	}
	return ""
}

func (x *SkuFeatures) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *SkuFeatures) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

func (x *SkuFeatures) GetMadThatDay() float32 {
	if x != nil {
		return x.MadThatDay
	}
	return 0
}

func (x *SkuFeatures) GetMbdThatDay() float32 {
	if x != nil {
		return x.MbdThatDay
	}
	return 0
}

func (x *SkuFeatures) GetAspLast_3() float32 {
	if x != nil {
		return x.AspLast_3
	}
	return 0
}

func (x *SkuFeatures) GetSkuHmlCut() float32 {
	if x != nil {
		return x.SkuHmlCut
	}
	return 0
}

func (x *SkuFeatures) GetAllSkuGmv_1RealTime() float32 {
	if x != nil {
		return x.AllSkuGmv_1RealTime
	}
	return 0
}

func (x *SkuFeatures) GetAllSkuGmvPerImp_7() float32 {
	if x != nil {
		return x.AllSkuGmvPerImp_7
	}
	return 0
}

func (x *SkuFeatures) GetAllSkuMad_1Hist() float32 {
	if x != nil {
		return x.AllSkuMad_1Hist
	}
	return 0
}

func (x *SkuFeatures) GetAllSkuMad_1RealTime() float32 {
	if x != nil {
		return x.AllSkuMad_1RealTime
	}
	return 0
}

func (x *SkuFeatures) GetAllSkuMargin_1RealTime() float32 {
	if x != nil {
		return x.AllSkuMargin_1RealTime
	}
	return 0
}

func (x *SkuFeatures) GetAllSkuMbd_1Hist() float32 {
	if x != nil {
		return x.AllSkuMbd_1Hist
	}
	return 0
}

func (x *SkuFeatures) GetAllSkuOrderConversion_1Hist() float32 {
	if x != nil {
		return x.AllSkuOrderConversion_1Hist
	}
	return 0
}

func (x *SkuFeatures) GetAllSkuOrderConversion_1RealTime() float32 {
	if x != nil {
		return x.AllSkuOrderConversion_1RealTime
	}
	return 0
}

func (x *SkuFeatures) GetAllSkuGmvPerDau_1RealTime() float32 {
	if x != nil {
		return x.AllSkuGmvPerDau_1RealTime
	}
	return 0
}

func (x *SkuFeatures) GetAllSkuImpression_1RealTime() float32 {
	if x != nil {
		return x.AllSkuImpression_1RealTime
	}
	return 0
}

func (x *SkuFeatures) GetAllSkuMarginPerDau_1RealTime() float32 {
	if x != nil {
		return x.AllSkuMarginPerDau_1RealTime
	}
	return 0
}

func (x *SkuFeatures) GetMarginRealTime() float32 {
	if x != nil {
		return x.MarginRealTime
	}
	return 0
}

func (x *SkuFeatures) GetAllSkuUniqueTransactingUsers_1RealTime() float32 {
	if x != nil {
		return x.AllSkuUniqueTransactingUsers_1RealTime
	}
	return 0
}

func (x *SkuFeatures) GetAllSkuOrderConversion_7() float32 {
	if x != nil {
		return x.AllSkuOrderConversion_7
	}
	return 0
}

func (x *SkuFeatures) GetUserPenetration_7() float32 {
	if x != nil {
		return x.UserPenetration_7
	}
	return 0
}

func (x *SkuFeatures) GetTopSkuFlag() int32 {
	if x != nil {
		return x.TopSkuFlag
	}
	return 0
}

func (x *SkuFeatures) GetTopSkuFlagAll() int32 {
	if x != nil {
		return x.TopSkuFlagAll
	}
	return 0
}

func (x *SkuFeatures) GetAllSkuOrders_1RealTime() float32 {
	if x != nil {
		return x.AllSkuOrders_1RealTime
	}
	return 0
}

func (x *SkuFeatures) GetLastResetAt() string {
	if x != nil {
		return x.LastResetAt
	}
	return ""
}

type GetSkuFeaturesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Features *SkuFeatures `protobuf:"bytes,1,opt,name=features,proto3" json:"features,omitempty"`
}

func (x *GetSkuFeaturesResp) Reset() {
	*x = GetSkuFeaturesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSkuFeaturesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkuFeaturesResp) ProtoMessage() {}

func (x *GetSkuFeaturesResp) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkuFeaturesResp.ProtoReflect.Descriptor instead.
func (*GetSkuFeaturesResp) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{5}
}

func (x *GetSkuFeaturesResp) GetFeatures() *SkuFeatures {
	if x != nil {
		return x.Features
	}
	return nil
}

type GetSkuFeaturesForAllCataloguesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FeaturesMap map[string]*SkuFeatures `protobuf:"bytes,1,rep,name=features_map,json=featuresMap,proto3" json:"features_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetSkuFeaturesForAllCataloguesResp) Reset() {
	*x = GetSkuFeaturesForAllCataloguesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSkuFeaturesForAllCataloguesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSkuFeaturesForAllCataloguesResp) ProtoMessage() {}

func (x *GetSkuFeaturesForAllCataloguesResp) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSkuFeaturesForAllCataloguesResp.ProtoReflect.Descriptor instead.
func (*GetSkuFeaturesForAllCataloguesResp) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{6}
}

func (x *GetSkuFeaturesForAllCataloguesResp) GetFeaturesMap() map[string]*SkuFeatures {
	if x != nil {
		return x.FeaturesMap
	}
	return nil
}

type UpsertSkuFeaturesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuId         string       `protobuf:"bytes,1,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
	CatalogueName string       `protobuf:"bytes,2,opt,name=catalogue_name,json=catalogueName,proto3" json:"catalogue_name,omitempty"`
	Features      *SkuFeatures `protobuf:"bytes,3,opt,name=features,proto3" json:"features,omitempty"`
	TraceId       string       `protobuf:"bytes,4,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	Ttl           *int32       `protobuf:"varint,5,opt,name=ttl,proto3,oneof" json:"ttl,omitempty"`
}

func (x *UpsertSkuFeaturesReq) Reset() {
	*x = UpsertSkuFeaturesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertSkuFeaturesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertSkuFeaturesReq) ProtoMessage() {}

func (x *UpsertSkuFeaturesReq) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertSkuFeaturesReq.ProtoReflect.Descriptor instead.
func (*UpsertSkuFeaturesReq) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{7}
}

func (x *UpsertSkuFeaturesReq) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

func (x *UpsertSkuFeaturesReq) GetCatalogueName() string {
	if x != nil {
		return x.CatalogueName
	}
	return ""
}

func (x *UpsertSkuFeaturesReq) GetFeatures() *SkuFeatures {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *UpsertSkuFeaturesReq) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *UpsertSkuFeaturesReq) GetTtl() int32 {
	if x != nil && x.Ttl != nil {
		return *x.Ttl
	}
	return 0
}

type UpsertSkuFeaturesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpsertSkuFeaturesResp) Reset() {
	*x = UpsertSkuFeaturesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertSkuFeaturesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertSkuFeaturesResp) ProtoMessage() {}

func (x *UpsertSkuFeaturesResp) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertSkuFeaturesResp.ProtoReflect.Descriptor instead.
func (*UpsertSkuFeaturesResp) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{8}
}

type LockReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Ttl     int32  `protobuf:"varint,2,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Owner   string `protobuf:"bytes,3,opt,name=owner,proto3" json:"owner,omitempty"`
	TraceId string `protobuf:"bytes,4,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (x *LockReq) Reset() {
	*x = LockReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockReq) ProtoMessage() {}

func (x *LockReq) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockReq.ProtoReflect.Descriptor instead.
func (*LockReq) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{9}
}

func (x *LockReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *LockReq) GetTtl() int32 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *LockReq) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *LockReq) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type LockResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LockResp) Reset() {
	*x = LockResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockResp) ProtoMessage() {}

func (x *LockResp) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockResp.ProtoReflect.Descriptor instead.
func (*LockResp) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{10}
}

type ReleaseReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key     string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Owner   string `protobuf:"bytes,2,opt,name=owner,proto3" json:"owner,omitempty"`
	TraceId string `protobuf:"bytes,3,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (x *ReleaseReq) Reset() {
	*x = ReleaseReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseReq) ProtoMessage() {}

func (x *ReleaseReq) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseReq.ProtoReflect.Descriptor instead.
func (*ReleaseReq) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{11}
}

func (x *ReleaseReq) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *ReleaseReq) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ReleaseReq) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type ReleaseResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ReleaseResp) Reset() {
	*x = ReleaseResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReleaseResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReleaseResp) ProtoMessage() {}

func (x *ReleaseResp) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReleaseResp.ProtoReflect.Descriptor instead.
func (*ReleaseResp) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{12}
}

type OrderExistsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuId   string `protobuf:"bytes,1,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
	UserId  int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TraceId string `protobuf:"bytes,3,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (x *OrderExistsReq) Reset() {
	*x = OrderExistsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderExistsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderExistsReq) ProtoMessage() {}

func (x *OrderExistsReq) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderExistsReq.ProtoReflect.Descriptor instead.
func (*OrderExistsReq) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{13}
}

func (x *OrderExistsReq) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

func (x *OrderExistsReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *OrderExistsReq) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type OrderExistsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *OrderExistsResp) Reset() {
	*x = OrderExistsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderExistsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderExistsResp) ProtoMessage() {}

func (x *OrderExistsResp) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderExistsResp.ProtoReflect.Descriptor instead.
func (*OrderExistsResp) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{14}
}

func (x *OrderExistsResp) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type MarkOrderReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuId     string `protobuf:"bytes,1,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
	UserId    int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExpiresAt string `protobuf:"bytes,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	TraceId   string `protobuf:"bytes,4,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (x *MarkOrderReq) Reset() {
	*x = MarkOrderReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkOrderReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkOrderReq) ProtoMessage() {}

func (x *MarkOrderReq) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkOrderReq.ProtoReflect.Descriptor instead.
func (*MarkOrderReq) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{15}
}

func (x *MarkOrderReq) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

func (x *MarkOrderReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MarkOrderReq) GetExpiresAt() string {
	if x != nil {
		return x.ExpiresAt
	}
	return ""
}

func (x *MarkOrderReq) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type MarkOrderResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarkOrderResp) Reset() {
	*x = MarkOrderResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkOrderResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkOrderResp) ProtoMessage() {}

func (x *MarkOrderResp) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkOrderResp.ProtoReflect.Descriptor instead.
func (*MarkOrderResp) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{16}
}

type ImpressionExistsReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuId   string `protobuf:"bytes,1,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
	UserId  int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	TraceId string `protobuf:"bytes,3,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (x *ImpressionExistsReq) Reset() {
	*x = ImpressionExistsReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpressionExistsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpressionExistsReq) ProtoMessage() {}

func (x *ImpressionExistsReq) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpressionExistsReq.ProtoReflect.Descriptor instead.
func (*ImpressionExistsReq) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{17}
}

func (x *ImpressionExistsReq) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

func (x *ImpressionExistsReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ImpressionExistsReq) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type ImpressionExistsResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ImpressionExistsResp) Reset() {
	*x = ImpressionExistsResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImpressionExistsResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImpressionExistsResp) ProtoMessage() {}

func (x *ImpressionExistsResp) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImpressionExistsResp.ProtoReflect.Descriptor instead.
func (*ImpressionExistsResp) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{18}
}

func (x *ImpressionExistsResp) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

type MarkImpressionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SkuId     string `protobuf:"bytes,1,opt,name=sku_id,json=skuId,proto3" json:"sku_id,omitempty"`
	UserId    int64  `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	ExpiresAt string `protobuf:"bytes,3,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"`
	TraceId   string `protobuf:"bytes,4,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
}

func (x *MarkImpressionReq) Reset() {
	*x = MarkImpressionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkImpressionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkImpressionReq) ProtoMessage() {}

func (x *MarkImpressionReq) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkImpressionReq.ProtoReflect.Descriptor instead.
func (*MarkImpressionReq) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{19}
}

func (x *MarkImpressionReq) GetSkuId() string {
	if x != nil {
		return x.SkuId
	}
	return ""
}

func (x *MarkImpressionReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *MarkImpressionReq) GetExpiresAt() string {
	if x != nil {
		return x.ExpiresAt
	}
	return ""
}

func (x *MarkImpressionReq) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

type MarkImpressionResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MarkImpressionResp) Reset() {
	*x = MarkImpressionResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_feature_store_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkImpressionResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkImpressionResp) ProtoMessage() {}

func (x *MarkImpressionResp) ProtoReflect() protoreflect.Message {
	mi := &file_feature_store_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkImpressionResp.ProtoReflect.Descriptor instead.
func (*MarkImpressionResp) Descriptor() ([]byte, []int) {
	return file_feature_store_proto_rawDescGZIP(), []int{20}
}

var File_feature_store_proto protoreflect.FileDescriptor

var file_feature_store_proto_rawDesc = []byte{
	0x0a, 0x13, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x22, 0x09, 0x0a, 0x07, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x22,
	0x1e, 0x0a, 0x08, 0x50, 0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x6e, 0x67, 0x22,
	0x6c, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x73,
	0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6b, 0x75,
	0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x55, 0x0a,
	0x21, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46,
	0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x49, 0x64, 0x22, 0xb5, 0x0a, 0x0a, 0x0b, 0x53, 0x6b, 0x75, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x70,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x64, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x64, 0x61, 0x79, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x61, 0x64, 0x54, 0x68, 0x61, 0x74, 0x44, 0x61,
	0x79, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x62, 0x64, 0x5f, 0x74, 0x68, 0x61, 0x74, 0x5f, 0x64, 0x61,
	0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6d, 0x62, 0x64, 0x54, 0x68, 0x61, 0x74,
	0x44, 0x61, 0x79, 0x12, 0x1c, 0x0a, 0x0a, 0x61, 0x73, 0x70, 0x5f, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x33, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x73, 0x70, 0x4c, 0x61, 0x73, 0x74,
	0x33, 0x12, 0x1e, 0x0a, 0x0b, 0x73, 0x6b, 0x75, 0x5f, 0x68, 0x6d, 0x6c, 0x5f, 0x63, 0x75, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x6b, 0x75, 0x48, 0x6d, 0x6c, 0x43, 0x75,
	0x74, 0x12, 0x33, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x67, 0x6d, 0x76,
	0x5f, 0x31, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x75, 0x47, 0x6d, 0x76, 0x31, 0x52, 0x65,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x15, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6b,
	0x75, 0x5f, 0x67, 0x6d, 0x76, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x69, 0x6d, 0x70, 0x5f, 0x37, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x10, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x75, 0x47, 0x6d, 0x76,
	0x50, 0x65, 0x72, 0x49, 0x6d, 0x70, 0x37, 0x12, 0x2a, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x5f, 0x73,
	0x6b, 0x75, 0x5f, 0x6d, 0x61, 0x64, 0x5f, 0x31, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x75, 0x4d, 0x61, 0x64, 0x31, 0x48,
	0x69, 0x73, 0x74, 0x12, 0x33, 0x0a, 0x17, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x6d,
	0x61, 0x64, 0x5f, 0x31, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x75, 0x4d, 0x61, 0x64, 0x31,
	0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x1a, 0x61, 0x6c, 0x6c, 0x5f,
	0x73, 0x6b, 0x75, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x31, 0x5f, 0x72, 0x65, 0x61,
	0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x61, 0x6c,
	0x6c, 0x53, 0x6b, 0x75, 0x4d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x31, 0x52, 0x65, 0x61, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x12, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x6d,
	0x62, 0x64, 0x5f, 0x31, 0x5f, 0x68, 0x69, 0x73, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x75, 0x4d, 0x62, 0x64, 0x31, 0x48, 0x69, 0x73, 0x74, 0x12,
	0x43, 0x0a, 0x1f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x5f, 0x68, 0x69,
	0x73, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x1a, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x75,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x31,
	0x48, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x24, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6b, 0x75, 0x5f,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x31, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x1e, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x75, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x31, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1f, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x67, 0x6d,
	0x76, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x75, 0x5f, 0x31, 0x5f, 0x72, 0x65, 0x61, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x18, 0x61, 0x6c, 0x6c,
	0x53, 0x6b, 0x75, 0x47, 0x6d, 0x76, 0x50, 0x65, 0x72, 0x44, 0x61, 0x75, 0x31, 0x52, 0x65, 0x61,
	0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x1e, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6b, 0x75,
	0x5f, 0x69, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x31, 0x5f, 0x72, 0x65,
	0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x19, 0x61,
	0x6c, 0x6c, 0x53, 0x6b, 0x75, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x31,
	0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47, 0x0a, 0x22, 0x61, 0x6c, 0x6c, 0x5f,
	0x73, 0x6b, 0x75, 0x5f, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x5f, 0x64,
	0x61, 0x75, 0x5f, 0x31, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x1b, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x75, 0x4d, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x50, 0x65, 0x72, 0x44, 0x61, 0x75, 0x31, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6d, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x6c,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x6d, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5b, 0x0a, 0x2c, 0x61,
	0x6c, 0x6c, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x5f,
	0x31, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x25, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x75, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6e, 0x67, 0x55, 0x73, 0x65, 0x72, 0x73, 0x31,
	0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x1a, 0x61, 0x6c, 0x6c, 0x5f,
	0x73, 0x6b, 0x75, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x37, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x16, 0x61, 0x6c,
	0x6c, 0x53, 0x6b, 0x75, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x37, 0x12, 0x2c, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x70, 0x65, 0x6e,
	0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x37, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x50, 0x65, 0x6e, 0x65, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x37, 0x12, 0x20, 0x0a, 0x0c, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x66, 0x6c,
	0x61, 0x67, 0x18, 0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x70, 0x53, 0x6b, 0x75,
	0x46, 0x6c, 0x61, 0x67, 0x12, 0x27, 0x0a, 0x10, 0x74, 0x6f, 0x70, 0x5f, 0x73, 0x6b, 0x75, 0x5f,
	0x66, 0x6c, 0x61, 0x67, 0x5f, 0x61, 0x6c, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d,
	0x74, 0x6f, 0x70, 0x53, 0x6b, 0x75, 0x46, 0x6c, 0x61, 0x67, 0x41, 0x6c, 0x6c, 0x12, 0x39, 0x0a,
	0x1a, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x6b, 0x75, 0x5f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x5f,
	0x31, 0x5f, 0x72, 0x65, 0x61, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x15, 0x61, 0x6c, 0x6c, 0x53, 0x6b, 0x75, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x73, 0x31,
	0x52, 0x65, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x5f, 0x72, 0x65, 0x73, 0x65, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x6c, 0x61, 0x73, 0x74, 0x52, 0x65, 0x73, 0x65, 0x74, 0x41, 0x74, 0x22, 0x4c, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x36, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x6b, 0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe7, 0x01, 0x0a, 0x22, 0x47,
	0x65, 0x74, 0x53, 0x6b, 0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72,
	0x41, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x65, 0x0a, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x5f, 0x6d, 0x61,
	0x70, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x42, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x1a, 0x5a, 0x0a, 0x10, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x30,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x6b,
	0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xc6, 0x01, 0x0a, 0x14, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53,
	0x6b, 0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a,
	0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73,
	0x6b, 0x75, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61,
	0x74, 0x61, 0x6c, 0x6f, 0x67, 0x75, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x08, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x6b,
	0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x74,
	0x74, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x74, 0x6c, 0x22, 0x17, 0x0a,
	0x15, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x6b, 0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x5e, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x71, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x0a, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x4f, 0x0a, 0x0a, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x64, 0x22, 0x0d, 0x0a, 0x0b, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x22, 0x5b, 0x0a, 0x0e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x22,
	0x27, 0x0a, 0x0f, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x78, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x0f, 0x0a, 0x0d, 0x4d, 0x61, 0x72, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x60, 0x0a, 0x13, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b,
	0x75, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x49, 0x64, 0x22, 0x2c, 0x0a, 0x14, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x7d, 0x0a, 0x11, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x6b, 0x75, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6b, 0x75, 0x49, 0x64, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6d, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x32, 0xe4, 0x06, 0x0a, 0x0c, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x16, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x50,
	0x6f, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x47, 0x65, 0x74,
	0x53, 0x6b, 0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53,
	0x6b, 0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e,
	0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x53, 0x6b, 0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x87, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x46, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c,
	0x6f, 0x67, 0x75, 0x65, 0x73, 0x12, 0x30, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x61, 0x6c, 0x6f,
	0x67, 0x75, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x31, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x6b, 0x75, 0x46, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x61, 0x74, 0x61,
	0x6c, 0x6f, 0x67, 0x75, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x60, 0x0a, 0x11,
	0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x6b, 0x75, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x12, 0x23, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x6b, 0x75, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x24, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x53, 0x6b, 0x75,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x39,
	0x0a, 0x04, 0x4c, 0x6f, 0x63, 0x6b, 0x12, 0x16, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x17,
	0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x07, 0x52, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x19, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a,
	0x1a, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x4e, 0x0a,
	0x0b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x1d, 0x2e, 0x66,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x48, 0x0a,
	0x09, 0x4d, 0x61, 0x72, 0x6b, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x1c, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5d, 0x0a, 0x10, 0x49, 0x6d, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x22, 0x2e, 0x66, 0x65,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x49, 0x6d, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x1a,
	0x23, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x49, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x12, 0x57, 0x0a, 0x0e, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6d,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x66, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x49, 0x6d, 0x70,
	0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x49,
	0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x00, 0x42,
	0x08, 0x5a, 0x06, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_feature_store_proto_rawDescOnce sync.Once
	file_feature_store_proto_rawDescData = file_feature_store_proto_rawDesc
)

func file_feature_store_proto_rawDescGZIP() []byte {
	file_feature_store_proto_rawDescOnce.Do(func() {
		file_feature_store_proto_rawDescData = protoimpl.X.CompressGZIP(file_feature_store_proto_rawDescData)
	})
	return file_feature_store_proto_rawDescData
}

var file_feature_store_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_feature_store_proto_goTypes = []interface{}{
	(*PingReq)(nil),                            // 0: feature_store.PingReq
	(*PongResp)(nil),                           // 1: feature_store.PongResp
	(*GetSkuFeaturesReq)(nil),                  // 2: feature_store.GetSkuFeaturesReq
	(*GetSkuFeaturesForAllCataloguesReq)(nil),  // 3: feature_store.GetSkuFeaturesForAllCataloguesReq
	(*SkuFeatures)(nil),                        // 4: feature_store.SkuFeatures
	(*GetSkuFeaturesResp)(nil),                 // 5: feature_store.GetSkuFeaturesResp
	(*GetSkuFeaturesForAllCataloguesResp)(nil), // 6: feature_store.GetSkuFeaturesForAllCataloguesResp
	(*UpsertSkuFeaturesReq)(nil),               // 7: feature_store.UpsertSkuFeaturesReq
	(*UpsertSkuFeaturesResp)(nil),              // 8: feature_store.UpsertSkuFeaturesResp
	(*LockReq)(nil),                            // 9: feature_store.LockReq
	(*LockResp)(nil),                           // 10: feature_store.LockResp
	(*ReleaseReq)(nil),                         // 11: feature_store.ReleaseReq
	(*ReleaseResp)(nil),                        // 12: feature_store.ReleaseResp
	(*OrderExistsReq)(nil),                     // 13: feature_store.OrderExistsReq
	(*OrderExistsResp)(nil),                    // 14: feature_store.OrderExistsResp
	(*MarkOrderReq)(nil),                       // 15: feature_store.MarkOrderReq
	(*MarkOrderResp)(nil),                      // 16: feature_store.MarkOrderResp
	(*ImpressionExistsReq)(nil),                // 17: feature_store.ImpressionExistsReq
	(*ImpressionExistsResp)(nil),               // 18: feature_store.ImpressionExistsResp
	(*MarkImpressionReq)(nil),                  // 19: feature_store.MarkImpressionReq
	(*MarkImpressionResp)(nil),                 // 20: feature_store.MarkImpressionResp
	nil,                                        // 21: feature_store.GetSkuFeaturesForAllCataloguesResp.FeaturesMapEntry
}
var file_feature_store_proto_depIdxs = []int32{
	4,  // 0: feature_store.GetSkuFeaturesResp.features:type_name -> feature_store.SkuFeatures
	21, // 1: feature_store.GetSkuFeaturesForAllCataloguesResp.features_map:type_name -> feature_store.GetSkuFeaturesForAllCataloguesResp.FeaturesMapEntry
	4,  // 2: feature_store.UpsertSkuFeaturesReq.features:type_name -> feature_store.SkuFeatures
	4,  // 3: feature_store.GetSkuFeaturesForAllCataloguesResp.FeaturesMapEntry.value:type_name -> feature_store.SkuFeatures
	0,  // 4: feature_store.FeatureStore.HeartBeat:input_type -> feature_store.PingReq
	2,  // 5: feature_store.FeatureStore.GetSkuFeatures:input_type -> feature_store.GetSkuFeaturesReq
	3,  // 6: feature_store.FeatureStore.GetSkuFeaturesForAllCatalogues:input_type -> feature_store.GetSkuFeaturesForAllCataloguesReq
	7,  // 7: feature_store.FeatureStore.UpsertSkuFeatures:input_type -> feature_store.UpsertSkuFeaturesReq
	9,  // 8: feature_store.FeatureStore.Lock:input_type -> feature_store.LockReq
	11, // 9: feature_store.FeatureStore.Release:input_type -> feature_store.ReleaseReq
	13, // 10: feature_store.FeatureStore.OrderExists:input_type -> feature_store.OrderExistsReq
	15, // 11: feature_store.FeatureStore.MarkOrder:input_type -> feature_store.MarkOrderReq
	17, // 12: feature_store.FeatureStore.ImpressionExists:input_type -> feature_store.ImpressionExistsReq
	19, // 13: feature_store.FeatureStore.MarkImpression:input_type -> feature_store.MarkImpressionReq
	1,  // 14: feature_store.FeatureStore.HeartBeat:output_type -> feature_store.PongResp
	5,  // 15: feature_store.FeatureStore.GetSkuFeatures:output_type -> feature_store.GetSkuFeaturesResp
	6,  // 16: feature_store.FeatureStore.GetSkuFeaturesForAllCatalogues:output_type -> feature_store.GetSkuFeaturesForAllCataloguesResp
	8,  // 17: feature_store.FeatureStore.UpsertSkuFeatures:output_type -> feature_store.UpsertSkuFeaturesResp
	10, // 18: feature_store.FeatureStore.Lock:output_type -> feature_store.LockResp
	12, // 19: feature_store.FeatureStore.Release:output_type -> feature_store.ReleaseResp
	14, // 20: feature_store.FeatureStore.OrderExists:output_type -> feature_store.OrderExistsResp
	16, // 21: feature_store.FeatureStore.MarkOrder:output_type -> feature_store.MarkOrderResp
	18, // 22: feature_store.FeatureStore.ImpressionExists:output_type -> feature_store.ImpressionExistsResp
	20, // 23: feature_store.FeatureStore.MarkImpression:output_type -> feature_store.MarkImpressionResp
	14, // [14:24] is the sub-list for method output_type
	4,  // [4:14] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_feature_store_proto_init() }
func file_feature_store_proto_init() {
	if File_feature_store_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_feature_store_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PongResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSkuFeaturesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSkuFeaturesForAllCataloguesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SkuFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSkuFeaturesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSkuFeaturesForAllCataloguesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertSkuFeaturesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpsertSkuFeaturesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LockResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReleaseResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderExistsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderExistsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkOrderReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkOrderResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpressionExistsReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImpressionExistsResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkImpressionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_feature_store_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkImpressionResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_feature_store_proto_msgTypes[7].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_feature_store_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_feature_store_proto_goTypes,
		DependencyIndexes: file_feature_store_proto_depIdxs,
		MessageInfos:      file_feature_store_proto_msgTypes,
	}.Build()
	File_feature_store_proto = out.File
	file_feature_store_proto_rawDesc = nil
	file_feature_store_proto_goTypes = nil
	file_feature_store_proto_depIdxs = nil
}
